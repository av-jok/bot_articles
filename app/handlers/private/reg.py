from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from app.loader import dp


class UserState(StatesGroup):
    name = State()
    address = State()


@dp.message_handler(commands="reg")
async def command_reg_handler(message: types.Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n –ü—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é /reg\n –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –¥–ª—è —á–µ–≥–æ –æ–Ω–∞ - üñï')
    await message.answer(f"–í–∞—à ID: {message.from_user.id} \n\n –í—ã –∑–Ω–∞–µ—Ç–µ –∫–æ–º—É –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å")

    # await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è")
    # await UserState.name.set()


# @dp.message_handler(state=UserState.name)
# async def get_username(message: types.Message, state: FSMContext):
#     await state.update_data(username=message.text)
#     await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å.")
#     await UserState.next()  # –ª–∏–±–æ –∂–µ UserState.adress.set()
#
#
# @dp.message_handler(state=UserState.address)
# async def get_address(message: types.Message, state: FSMContext):
#     await state.update_data(address=message.text)
#     data = await state.get_data()
#     await message.answer(f"–ò–º—è: {data['username']}\n"
#                          f"–ê–¥—Ä–µ—Å: {data['address']}")
#     await state.finish()
